<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brayden Bin&#39;s Blog</title>
  
  <subtitle>坚持走下去</subtitle>
  <link href="http://localhost:4000/atom.xml" rel="self"/>
  
  <link href="http://localhost:4000/"/>
  <updated>2024-05-25T13:38:57.970Z</updated>
  <id>http://localhost:4000/</id>
  
  <author>
    <name>Brayden Bin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSharp IO-File</title>
    <link href="http://localhost:4000/2024/05/25/CsharpIO_8/"/>
    <id>http://localhost:4000/2024/05/25/CsharpIO_8/</id>
    <published>2024-05-25T12:32:59.605Z</published>
    <updated>2024-05-25T13:38:57.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-IO-File"><a href="#C-IO-File" class="headerlink" title="C#IO-File"></a><center>C#IO-File</center></h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li>IO-路径(Path)</li><li>IO-文件(File)</li><li>IO-文件(FileInfo非静态类)</li><li>IO-文件夹(Directory)</li><li>IO-文件夹(DirectoryInfo非静态类)</li><li>文件数据写入</li><li>思维导图<br><a href="https://imgse.com/i/pklKtKJ"><img src="https://s21.ax1x.com/2024/05/25/pklKtKJ.png" alt="pklKtKJ.png"></a></li></ul><p>+图片</p><h2 id="二、IO-路径-Path"><a href="#二、IO-路径-Path" class="headerlink" title="二、IO-路径(Path)"></a>二、IO-路径(Path)</h2><ul><li>定义：Path是一种获取文件名以及路径的<strong>静态方法</strong>。</li><li>定义一个字符串：<code>path = &quot;D:\\Visual Studio\\C#_Advanced\\C#文件IO\\Program.cs&quot;;</code></li><li>获取文件名：<code>Path.GetFileName(path)</code></li><li>获取文件名不包括扩展名：<code>Path.GetFileNameWithoutExtension(path)</code></li><li>获取目录：<code>Path.GetDirectoryName(path)</code></li></ul><p><strong>代码部分如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">string path = &quot;D:\\Visual Studio\\C#_Advanced\\C#文件IO\\Program.cs&quot;;</span><br><span class="line">// 获取路径的文件名</span><br><span class="line">Console.WriteLine(Path.GetFileName(path));</span><br><span class="line">// 获取路径的文件名（不包括扩展名）</span><br><span class="line">Console.WriteLine(Path.GetFileNameWithoutExtension(path));</span><br><span class="line">// 获取扩展名</span><br><span class="line">Console.WriteLine(Path.GetExtension(path));</span><br><span class="line">// 获取路径分隔符</span><br><span class="line">Console.WriteLine(Path.DirectorySeparatorChar);</span><br><span class="line">// 获取目录名</span><br><span class="line">Console.WriteLine(Path.GetDirectoryName(path));</span><br><span class="line">// ./ 获取当前目录， ../ 获取上一级的目录 </span><br><span class="line">Console.WriteLine(Path.GetFullPath(&quot;./&quot;));</span><br><span class="line">Console.WriteLine(Path.GetFullPath(&quot;../&quot;));</span><br></pre></td></tr></table></figure><h2 id="三、IO-文件-File"><a href="#三、IO-文件-File" class="headerlink" title="三、IO-文件(File)"></a>三、IO-文件(File)</h2><ul><li><ul><li>定义：FileI是用于操作系统文件的类，<strong>静态类</strong>。</li></ul></li><li>判断文件是否存在：<code>File.Exists(路径)</code></li><li>创建文件：<code>File.Create(路径)</code></li><li>删除文件：<code>File.Delete(路径)</code></li><li>复制文件：<code>File.Copy(源文件路径, 目标文件路径)</code></li><li>剪切文件：<code>File.Move(源文件路径, 目标文件路径)</code></li></ul><p><strong>代码部分如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">if (File.Exists(&quot;./Test_2.txt&quot;))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;yes&quot;);</span><br><span class="line">    File.Delete(&quot;./Test_2.txt&quot;);</span><br><span class="line">    Console.WriteLine(&quot;文件删除&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;no&quot;);</span><br><span class="line">    File.Create(&quot;./Test_2.txt&quot;).Dispose(); // .Dispose()释放资源</span><br><span class="line">    Console.WriteLine(&quot;文件创建&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 文件复制</span><br><span class="line">File.Copy(&quot;./Test_2.txt&quot;, &quot;C:\\Users\\bindo\\Desktop\\Test_4.txt&quot;);</span><br><span class="line"></span><br><span class="line">// 文件剪切</span><br><span class="line">File.Move(&quot;./Test_2.txt&quot;, &quot;C:\\Users\\bindo\\Desktop\\Test_4.txt&quot;);</span><br></pre></td></tr></table></figure><h2 id="三、IO-文件-FileInfo非静态类"><a href="#三、IO-文件-FileInfo非静态类" class="headerlink" title="三、IO-文件(FileInfo非静态类)"></a>三、IO-文件(FileInfo非静态类)</h2><ul><li>定义：FileInfo 是用于操作系统文件的类，非静态类，需要创建实例。 功能类似于File</li><li>创建实例：<code>FileInfo fileinfo = new FileInfo(路径)</code></li><li>创建文件：<code>fileInfo.Create()</code></li><li>删除文件：<code>fileInfo.Delete()</code></li><li>拷贝文件：<code>fileInfo.CopyTo(目标文件路径)</code></li><li>什么时候使用File，使用FileInfo</li></ul><ol><li>对单个文件进行多次操作，使用FileInfo。</li><li>对多个文件进行单一操作，使用File。</li></ol><p><strong>代码部分如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FileInfo testInfo = new FileInfo(&quot;./Text_5&quot;);</span><br><span class="line"></span><br><span class="line">if (testInfo.Exists)</span><br><span class="line">&#123;</span><br><span class="line">    testInfo.Delete();</span><br><span class="line">    Console.WriteLine(&quot;文件删除&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    testInfo.Create().Dispose();</span><br><span class="line">    Console.WriteLine(&quot;文件创建&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文件拷贝</span><br><span class="line">testInfo.CopyTo(&quot;C:\\Users\\bindo\\Desktop\\test_6.txt&quot;);</span><br><span class="line">// 文件拷贝</span><br><span class="line">testInfo.MoveTo(&quot;C:\\Users\\bindo\\Desktop\\test_6.txt&quot;);</span><br></pre></td></tr></table></figure><h2 id="四、IO-文件夹-Directory"><a href="#四、IO-文件夹-Directory" class="headerlink" title="四、IO-文件夹(Directory)"></a>四、IO-文件夹(Directory)</h2><ul><li>定义：管理文件夹或目录的<strong>静态类</strong>。</li><li>创建文件夹：<code>Directory.CreateDirectory(文件夹路径)</code></li><li>删除文件夹：<code>Directory.Delete(文件夹路径);</code></li><li>剪切文件夹：<code>Directory.Move(源文件夹路径, 目标文件夹路径)</code></li><li>获取文件夹下的文件夹：<code>Directory.GetDirectories(文件夹路径)</code></li></ul><p><strong>代码部分如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">if (Directory.Exists(&quot;./Test&quot;))</span><br><span class="line">&#123;</span><br><span class="line">    Directory.Delete(&quot;./Test&quot;);</span><br><span class="line">    Console.WriteLine(&quot;删除文件夹&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    Directory.CreateDirectory(&quot;./Test&quot;);</span><br><span class="line">    Console.WriteLine(&quot;创建文件夹&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 剪切文件夹</span><br><span class="line">Directory.Move(&quot;./Test&quot;, &quot;../Test&quot;);</span><br><span class="line"></span><br><span class="line">//获取指定文价夹下的文件夹</span><br><span class="line">string[] dires = Directory.GetDirectories(&quot;../../&quot;);</span><br><span class="line">foreach (string diresPath in dires)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(diresPath);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(&quot;________________&quot;);</span><br><span class="line"></span><br><span class="line">// 获取文件夹下的所有文件</span><br><span class="line">string[] files = Directory.GetFiles(&quot;../../&quot;);</span><br><span class="line">foreach (string file in files)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(file);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(&quot;________________&quot;);</span><br><span class="line"></span><br><span class="line">// 获取文件夹下的所有文件和文件夹</span><br><span class="line">string[] enters = Directory.GetFileSystemEntries(&quot;../../&quot;);</span><br><span class="line">foreach (string enterPath in enters)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(enterPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果截图：<br><a href="https://imgse.com/i/pklKUbR"><img src="https://s21.ax1x.com/2024/05/25/pklKUbR.md.png" alt="pklKUbR.md.png"></a></p><h2 id="五、IO-文件夹-DirectoryInfo"><a href="#五、IO-文件夹-DirectoryInfo" class="headerlink" title="五、IO-文件夹(DirectoryInfo)"></a>五、IO-文件夹(DirectoryInfo)</h2><ul><li>对文件夹进行操作，非静态类，需要创建实例</li><li>用法类比File与FileInfo，不多赘述了。</li></ul><h2 id="六、IO-文件数据写入"><a href="#六、IO-文件数据写入" class="headerlink" title="六、IO-文件数据写入"></a>六、IO-文件数据写入</h2><p><strong>写入的方法：</strong></p><ul><li>WriteAllText：一次将所有内容写入。</li><li>WriteAllLines：<strong>按行写入</strong>，一个字符串一行。</li><li>WriteAllBytes：按<strong>ASCII码</strong>写入</li></ul><p><strong>读取方法：</strong></p><ul><li>ReadAllText：一次读取所有内容。</li><li>ReadAllLines：按行读取内容。</li><li>ReadAllBytes：<strong>ASCII码</strong>读取。</li></ul><p>另外</p><ul><li><p>WriteAllBytes使用时注意编码，Encoding.UTF8.GetBytes(内容)</p></li><li><p>解码：Encoding.UTF8.GetString(bytes)</p></li><li><p>WriteAllBytes主要用于操作简单的，比较小的<strong>二进制文件</strong>（如图片，视频，音频）</p></li><li><p>WriteAllText,WriteAllLines主要用于操作简单的，比较小的<strong>文本文件</strong>（只包含文本内容的文件，如.txt .cs）</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 按行写入数据</span><br><span class="line">File.WriteAllLines(&quot;./Test.txt&quot;, new string[] &#123; &quot;第一行&quot;, &quot;第二行&quot;, &quot;第三行&quot; &#125;);</span><br><span class="line">Console.WriteLine(&quot;写入成功&quot;);</span><br><span class="line">// 遍历打印</span><br><span class="line">string[] content = File.ReadAllLines(&quot;./Test.txt&quot;);</span><br><span class="line">foreach (string line in content)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(line);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(&quot;数据读取完毕&quot;);</span><br><span class="line"></span><br><span class="line">// 按内容写入数据</span><br><span class="line">File.WriteAllText(&quot;./Test.txt&quot;, &quot;今天是星期五 \n 天气多云&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 按字节写入数据</span><br><span class="line">// 编码</span><br><span class="line">File.WriteAllBytes(&quot;./Test.txt&quot;, Encoding.UTF8.GetBytes(&quot;第一行\n第二行\n第三行&quot;));</span><br><span class="line">byte[] bytes = File.ReadAllBytes(&quot;./Test.txt&quot;);</span><br><span class="line">// 遍历打印,没有解码，打印出来数字</span><br><span class="line">foreach (byte b in bytes)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(b);</span><br><span class="line">&#125;</span><br><span class="line">//解码</span><br><span class="line">string content_1 = Encoding.UTF8.GetString(bytes);</span><br><span class="line">Console.WriteLine(content_1);</span><br></pre></td></tr></table></figure><hr><hr><p>糊糊涂涂就写了。<br>最近又懒惰了。<br>可别停下脚步啊。<br>加油。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-IO-File&quot;&gt;&lt;a href=&quot;#C-IO-File&quot; class=&quot;headerlink&quot; title=&quot;C#IO-File&quot;&gt;&lt;/a&gt;&lt;center&gt;C#IO-File&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C# 反射与特性</title>
    <link href="http://localhost:4000/2024/05/22/C_sharp_Reflection_Attribute_7/"/>
    <id>http://localhost:4000/2024/05/22/C_sharp_Reflection_Attribute_7/</id>
    <published>2024-05-22T08:39:45.774Z</published>
    <updated>2024-05-22T12:58:41.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-反射与特性"><a href="#C-反射与特性" class="headerlink" title="C# 反射与特性"></a><center>C# 反射与特性</center></h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li>思维导图<br><a href="https://imgse.com/i/pkMox7F"><img src="https://s21.ax1x.com/2024/05/22/pkMox7F.png" alt="pkMox7F.png"></a></li><li>C#Type类型</li><li>C#反射</li><li>C#特性</li></ul><h2 id="二、Type类型"><a href="#二、Type类型" class="headerlink" title="二、Type类型"></a>二、Type类型</h2><ul><li>获取<strong>值类型</strong>的Type对象。 值类型包括：数值类型，结构体，bool型，用户定义的结构体，枚举，可空类型。如int, double。</li><li>值类型数据.GetType();</li><li>typeof(System.值类型)</li><li>Type.GetType(“”System.值类型””)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type type_1 = 64.GetType(); // 数据.GetType();</span><br><span class="line">Type type_2 = typeof(System.Int32); // typeof(System.类型)</span><br><span class="line">Type type_3 = Type.GetType(&quot;System.Int32&quot;); // Type.GetType(&quot;&quot;System.类型&quot;&quot;)</span><br></pre></td></tr></table></figure><ul><li>获取<strong>引用类型</strong>的Type对象，引用类型包括：数组，用户定义的类、接口、委托，object，字符串，null类型，类。如object,string。</li><li>引用类型.GetType();</li><li>typeod(引用类型)</li><li>Type.GetType(“System.引用类型”);</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type type_4 = new Object().GetType();</span><br><span class="line">Type type_5 = typeof(System.Object);</span><br><span class="line">Type type_6 = Type.GetType(&quot;System.Object&quot;);</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pkMTSk4"><img src="https://s21.ax1x.com/2024/05/22/pkMTSk4.png" alt="pkMTSk4.png"></a></p><p><strong>总结</strong>：无非三种方式：</p><ul><li>类型数据.GetType();</li><li>typeod(命名空间.类型)</li><li>Type.GetType(“命名空间.类型”);</li></ul><h2 id="三、C-反射"><a href="#三、C-反射" class="headerlink" title="三、C#反射"></a>三、C#反射</h2><h3 id="通过反射获取字段-Field"><a href="#通过反射获取字段-Field" class="headerlink" title="通过反射获取字段(Field)"></a>通过反射获取字段(Field)</h3><ul><li>先创建一个<strong>Person类</strong>，供我们使用。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    private string id = &quot;1001&quot;;</span><br><span class="line">    public string Name = &quot;Jack&quot;;</span><br><span class="line">    public int age = 26;</span><br><span class="line">    public static string nation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先获取Type类型, 三种方式任选一种。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type type_1 = new Person().GetType();</span><br><span class="line">Type type_2 = typeof(CSharpReflection.Person); // 推荐</span><br><span class="line">Type type_3= Type.GetType(Person.nation);</span><br></pre></td></tr></table></figure><ul><li>获取<strong>Person</strong> 类的全部字段，FieldInfo 是字段类型的类。GetFields()获取字段。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> //获取Person类的全部字段</span><br><span class="line">FieldInfo[] PersonInfo_1 = type_2.GetFields();</span><br></pre></td></tr></table></figure><ul><li>打印字段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 打印字段,获取所有public 字段。 GetValue(传递一个对象)</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; PersonInfo_3.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine($&quot;字段类型:&#123;PersonInfo_3[i].FieldType&#125;\t字段名字:&#123;PersonInfo_3[i].Name&#125;\t字段值:&#123;PersonInfo_3[i].GetValue(new Person())&#125;&quot;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果<br><a href="https://imgse.com/i/pkMoOXV"><img src="https://s21.ax1x.com/2024/05/22/pkMoOXV.png" alt="pkMoOXV.png"></a></li></ul><hr><ul><li>也可以获取某些类型的字段，如静态的，公有的，非静态的，非公有的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// BindingFlags.Instance 获取实例的，非静态的</span><br><span class="line">// BindingFlags.NonPublic 获取非公有的</span><br><span class="line">FieldInfo[] PersonInfo_2 = type_2.GetFields(BindingFlags.Instance | BindingFlags.NonPublic);</span><br><span class="line"></span><br><span class="line">// BindingFlags.Static 获取静态字段</span><br><span class="line">// BindingFlags.Public 获取公有的</span><br><span class="line">FieldInfo[] PersonInfo_3 = type_2.GetFields(BindingFlags.Static | BindingFlags.Public);</span><br></pre></td></tr></table></figure><hr><ul><li>获取单个字段，同样用FieldInfo接收,但是用的是 <strong>GetField()</strong> 方法（少了s），其中括号中放入字段的名称（字符串）。</li><li>字段.SetValue()。SetValue(实例类名（可null）, 值)设置字段值</li><li>获取值，并打印Console.WriteLine(field.GetValue(null));</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FieldInfo field = type_2.GetField(&quot;nation&quot;); // 获取指定字段，用FieldInfo类型的实例来接收</span><br><span class="line">field.SetValue(null, &quot;China&quot;); // SetValue(实例类名（可null）, 值)设置字段值</span><br><span class="line">Console.WriteLine(field.GetValue(null)); // GetValue(null)</span><br></pre></td></tr></table></figure><p>+总图</p><h3 id="通过反射获取属性-Property"><a href="#通过反射获取属性-Property" class="headerlink" title="通过反射获取属性(Property)"></a>通过反射获取属性(Property)</h3><ul><li>先添加<strong>Staff类</strong>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Staff</span><br><span class="line">&#123;</span><br><span class="line">    // 非公有字段</span><br><span class="line">    private int id = 1001;</span><br><span class="line">    private string name = &quot;pop&quot;;</span><br><span class="line">    private int age = 90;</span><br><span class="line">    private static string nation;</span><br><span class="line"></span><br><span class="line">    // 属性</span><br><span class="line">    public int Id &#123; get =&gt; id; set =&gt; id = value; &#125;</span><br><span class="line">    public string Name &#123; get =&gt; name; set =&gt; name = value; &#125;</span><br><span class="line">    public int Age &#123; get =&gt; age; set =&gt; age = value; &#125;</span><br><span class="line">    public static string Nation &#123; get =&gt; nation; set =&gt; nation = value; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1.1获取Type类</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type type = new Staff().GetType();</span><br></pre></td></tr></table></figure><ul><li>1.1获取全部属性， <strong>Property[]</strong> 属性数组， 获取全部属性 GetProperties()</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PropertyInfo[] propertyInfos = type.GetProperties();</span><br></pre></td></tr></table></figure><ul><li>1.0以上两步可以一步完成,</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PropertyInfo[] properties = typeof(Staff).GetProperties();</span><br></pre></td></tr></table></figure><ul><li>可以实例化一个<strong>Staff类</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Staff staff_1 = new Staff()</span><br><span class="line">&#123;</span><br><span class="line">    Name = &quot;KK&quot;,</span><br><span class="line">    Age = 89,</span><br><span class="line">    Id = 1002</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>遍历</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 遍历</span><br><span class="line">foreach (PropertyInfo property in properties)</span><br><span class="line">&#123;</span><br><span class="line">    // 获取默认类</span><br><span class="line">    Console.WriteLine($&quot;属性类型：&#123;property.PropertyType&#125;\t 属性名字&#123;property.Name&#125;\t属性值&#123;property.GetValue(new Staff())&#125; &quot;);</span><br><span class="line">    // 获取已经实例化的类</span><br><span class="line">    Console.WriteLine($&quot;属性类型：&#123;property.PropertyType&#125;\t 属性名字&#123;property.Name&#125;\t属性值&#123;property.GetValue(staff_1)&#125; &quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pkMojmT"><img src="https://s21.ax1x.com/2024/05/22/pkMojmT.png" alt="pkMojmT.png"></a></p><hr><ul><li>获取指定类型, <strong>GetProperty(“Nation”)</strong> 获取名为”Nation”的属性。</li><li>设置指定对象的基础值：<strong>SetValue( , ); （指定对象，值）</strong></li><li>获取实例中的值：<strong>GetValue(实例);</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PropertyInfo propertyInfo = typeof(Staff).GetProperty(&quot;Nation&quot;);</span><br><span class="line">propertyInfo.SetValue(propertyInfo, &quot;American&quot;);</span><br><span class="line">Console.WriteLine($&quot;国籍&#123;propertyInfo.GetValue(new Staff())&#125;&quot;);</span><br></pre></td></tr></table></figure><p>+总图</p><h3 id="通过反射获取构造函数-Constructor"><a href="#通过反射获取构造函数-Constructor" class="headerlink" title="通过反射获取构造函数(Constructor)"></a>通过反射获取构造函数(Constructor)</h3><ul><li>在<strong>Staff类</strong>中插入构造函数,包括静态的，非静态的，私有的，公有的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private Staff() // 私有的，空的</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public Staff(int id, string name, int age) // 公有的，有参数的</span><br><span class="line">&#123;</span><br><span class="line">    this.id = id;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">static Staff() // 静态的</span><br><span class="line">&#123;</span><br><span class="line">    nation = &quot;新加坡&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先获取类型(三种方式中选一中)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type type = Type.GetType(&quot;CSharpReflection.Staff&quot;);</span><br></pre></td></tr></table></figure><ul><li>根据<strong>BindingFlags.</strong> 获取哪些类型的函数</li><li>可以获取所有非静态函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConstructorInfo[] constructors = type.GetConstructors();</span><br></pre></td></tr></table></figure><ul><li>也可以获取所有静态非公有函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConstructorInfo[] constructors_1 = type.GetConstructors(BindingFlags.Static | BindingFlags.NonPublic);</span><br></pre></td></tr></table></figure><ul><li>还可以获取非静态的， 非公有的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConstructorInfo[] constructors_2 = type.GetConstructors(BindingFlags.Instance | BindingFlags.NonPublic);</span><br></pre></td></tr></table></figure><ul><li>遍历</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foreach (ConstructorInfo constructor in constructors_1)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine($&quot;构造函数名称：&#123;constructor.Name&#125;\t 构造函数参数个数：&#123;constructor.GetParameters().Length&#125;\t 判断是否是静态：&#123;constructor.IsStatic&#125;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果<br><a href="https://imgse.com/i/pkMov0U"><img src="https://s21.ax1x.com/2024/05/22/pkMov0U.png" alt="pkMov0U.png"></a></li></ul><hr><ul><li>获取指定的构造函数,我是获取 <strong>public Staff(int id, string name, int age)</strong> 这个是共的，非静态的，而且是有参数的，所以获取构造函数 <strong>GetConstructor()</strong> 要添加Type类成员，<strong>否则无法获取。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConstructorInfo cons = type.GetConstructor(new Type[] &#123; typeof(int), typeof(string), typeof(int) &#125;);</span><br></pre></td></tr></table></figure><ul><li>将构造函数实现，并传入值，实例一个<strong>Staff类</strong>接收。<strong>as</strong> 转换类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Staff staff_1 = cons.Invoke(new object[] &#123; 1001, &quot;lll&quot;, 20 &#125;) as Staff; // as 转换类型</span><br><span class="line">Console.WriteLine(staff_1.Name + &quot;\t&quot; + staff_1.Id + &quot;\t&quot; + staff_1.Age); // 打印</span><br></pre></td></tr></table></figure><h3 id="使用反射获得方法-Method"><a href="#使用反射获得方法-Method" class="headerlink" title="使用反射获得方法(Method)"></a>使用反射获得方法(Method)</h3><ul><li>为 <strong>Staff类</strong> 重写，并添加方法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 重写ToString()方法</span><br><span class="line">public override string ToString()</span><br><span class="line">&#123;</span><br><span class="line">    return $&quot;Staff:\tId = &#123;this.id&#125;\tName = &#123;this.name&#125;\tAge = &#123;this.age&#125;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">// 自我介绍方法</span><br><span class="line">public string Introduce()</span><br><span class="line">&#123;</span><br><span class="line">    return $&quot;我是&#123;this.name&#125;,编号&#123;this.id&#125;今年&#123;this.age&#125;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">// 静态方法</span><br><span class="line">public static void ShowN(string nation_)</span><br><span class="line">&#123;</span><br><span class="line">    Nation = nation_;</span><br><span class="line">    Console.WriteLine($&quot;来自&#123;Nation&#125;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>老方法，<strong>MethodInfo</strong> 方法类，用来存储方法</li><li><strong>GetMethods()</strong> 获取方法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 获取Type 类</span><br><span class="line">Type type = typeof(Staff);</span><br><span class="line">// 获取总方法</span><br><span class="line">MethodInfo[] methods = type.GetMethods();</span><br><span class="line">// 遍历所有方法,打印方法的基本信息</span><br><span class="line">foreach (var method in methods)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine($&quot;\t函数名称&#123;method.Name&#125;\t函数返回类型&#123;method.ReturnType&#125;\t 函数参数长度&#123;method.GetParameters().Length&#125;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>获取指定方法。</li><li>type.GetMethod(“<strong>方法名</strong>“, <strong>new Type[]{}</strong>); 花括号:{有参数的话,输入参数类型,没有则不填}</li><li>method_1.Invoke(输入实例)。<strong>null</strong> 我也不明白😑。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MethodInfo method_1 = type.GetMethod(&quot;Introduce&quot;, new Type[] &#123; &#125;); // (&quot;方法名&quot;, new Type[]&#123;输入参数类型,没有则不填&#125;)</span><br><span class="line">Console.WriteLine(method_1.Invoke(new Staff(1003, &quot;lll&quot;, 12), null));</span><br></pre></td></tr></table></figure><ul><li>运行结果<br><a href="https://imgse.com/i/pkMoL60"><img src="https://s21.ax1x.com/2024/05/22/pkMoL60.png" alt="pkMoL60.png"></a></li></ul><hr><ul><li>获取静态方法</li><li>MethodInfo info &#x3D; type.GetMethod(“<strong>方法名</strong>“, new Type[] { <strong>typeof(参数类型)</strong> });如如果没有参数则<strong>new Type[]{}</strong> </li><li>info.Invoke(null, new object[] { “马来西亚” })。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 获取静态函数</span><br><span class="line">MethodInfo info = type.GetMethod(&quot;ShowN&quot;, new Type[] &#123; typeof(string) &#125;);</span><br><span class="line">Console.WriteLine(info.Invoke(null, new object[] &#123; &quot;马来西亚&quot; &#125;));</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pkMTptJ"><img src="https://s21.ax1x.com/2024/05/22/pkMTptJ.png" alt="pkMTptJ.png"></a></p><h2 id="四、特性"><a href="#四、特性" class="headerlink" title="四、特性"></a>四、特性</h2><h3 id="特性介绍"><a href="#特性介绍" class="headerlink" title="特性介绍"></a>特性介绍</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*特性</span><br><span class="line">* 基本定义:指一种语序程序员向程序添加元数据的语言结构，用于存储程序信息的类。</span><br><span class="line">* 语法结构：[特性名(参数列表)]</span><br><span class="line">* 常见特性：</span><br><span class="line">*      - Obsolete: 该特性用于标注类或成员已经被弃用，提示错误信息或警告信息</span><br><span class="line">*      - Serializable: 该特性用于标注类是可以序列化</span><br><span class="line">* </span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>写一个<strong>Test类</strong> 使用<strong>Obsolete</strong>特性</li><li>(<strong>警告信息</strong> , <strong>false警告true报错</strong>), 警告：还可以运行；报错：不能运行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    [Obsolete(&quot;OldMethod()方法已经过时，请使用NewMethod()方法&quot;, false)]</span><br><span class="line">    public void OldMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        // (警告信息,false警告true报错), 警告：还可以运行；报错：不能运行</span><br><span class="line">        Console.WriteLine(&quot;Test.OldMethod&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void NewMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;Test.NewMethod&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    new Test().OldMethod(); </span><br><span class="line">    new Test().NewMethod();</span><br><span class="line"></span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="自定义特性"><a href="#自定义特性" class="headerlink" title="自定义特性"></a>自定义特性</h3><ul><li>命名时最好要<strong>加后缀Attribute</strong>。</li><li>自定义特性需要继承 <strong>Attribute</strong> 类。</li><li><strong>AttributeUsage</strong> 限定使用特性的类型范围(比如，用于类，字段，还是属性)。</li><li>可有有多个特性：<strong>AllowMultiple &#x3D; true</strong></li><li>以下代码是自定义一个特性: IntroduceAttribute</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// AttributeUsage 限定使用特性的类型范围, 可有有多个特性：AllowMultiple = true</span><br><span class="line">[AttributeUsage(AttributeTargets.Class | AttributeTargets.Field | AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]</span><br><span class="line">class IntroduceAttribute : Attribute</span><br><span class="line">&#123;</span><br><span class="line">    // 描述类成员</span><br><span class="line">    // 字段</span><br><span class="line">    private string type;          // 类型</span><br><span class="line">    private string authod;      // 作者</span><br><span class="line">    private string dateTime;     // 日期</span><br><span class="line">    private string descrip;     // 描述</span><br><span class="line">    // 构造函数</span><br><span class="line">    public IntroduceAttribute()&#123;&#125;   </span><br><span class="line">    public IntroduceAttribute(string type, string authod, string dateTime, string descrip)</span><br><span class="line">    &#123;</span><br><span class="line">        this.type = type;</span><br><span class="line">        this.authod = authod;</span><br><span class="line">        this.dateTime = dateTime;</span><br><span class="line">        this.descrip = descrip;</span><br><span class="line">    &#125;</span><br><span class="line">    // 属性</span><br><span class="line">    public string Type &#123; get =&gt; type; set =&gt; type = value; &#125;</span><br><span class="line">    public string Authod &#123; get =&gt; authod; set =&gt; authod = value; &#125;</span><br><span class="line">    public string DateTime &#123; get =&gt; dateTime; set =&gt; dateTime = value; &#125;</span><br><span class="line">    public string Descrip &#123; get =&gt; descrip; set =&gt; descrip = value; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>定义一个类, 用来测试自定义特性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个测试类， 用来测试自定义特性</span><br><span class="line"></span><br><span class="line">[Introduce(&quot;测试V1&quot;,&quot;Brayden&quot;,&quot;2036-05-23&quot;,&quot;测试自定义特性&quot;)]</span><br><span class="line">[Introduce(&quot;测试V2&quot;,&quot;Brayden&quot;,&quot;2037-09-06&quot;,&quot;测试自定义特性&quot;)]</span><br><span class="line">class Test // 类</span><br><span class="line">&#123;</span><br><span class="line">    private string name;</span><br><span class="line"></span><br><span class="line">    public string Name &#123; get =&gt; name; set =&gt; name = value; &#125;</span><br><span class="line">    [Introduce(&quot;打印&quot;, &quot;Test&quot;, &quot;2036-06-19&quot;, &quot;打印自身&quot;)]</span><br><span class="line">    public void Printf() // 方法</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;Printf()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主函数代码</li><li>通过<strong>反射</strong>获取类或类的成员的特性,Type type &#x3D; typeof(Test);</li><li>判断类上是否有指定的特性：if (<strong>type.IsDefined</strong>(typeof(<strong>特性名</strong>), 是否检查该成员的上级))</li><li><strong>type.GetCustomAttributes()</strong> 获取特性，并返回多个类，用基类数组接收</li><li>以下代码是<strong>通过反射获取类或类的成员的特性</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 通过反射获取类或类的成员的特性</span><br><span class="line">Type type = typeof(Test);</span><br><span class="line">// 判断类上是否有指定的特性</span><br><span class="line">if (type.IsDefined(typeof(IntroduceAttribute), false))</span><br><span class="line">&#123;</span><br><span class="line">    // type.GetCustomAttributes()获取特性，并返回多个类，用基类数组接收</span><br><span class="line">    Object[] ob = type.GetCustomAttributes(typeof(IntroduceAttribute), false);</span><br><span class="line">    foreach (IntroduceAttribute introduce in ob)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(introduce);</span><br><span class="line">        Console.WriteLine(introduce.Type + &quot;\t&quot; + introduce.Authod + &quot;\t&quot; + introduce.DateTime + &quot;\t&quot; + introduce.Descrip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果<br><a href="https://imgse.com/i/pkMT9h9"><img src="https://s21.ax1x.com/2024/05/22/pkMT9h9.png" alt="pkMT9h9.png"></a></li></ul><hr><ul><li>以下代码是<strong>获取方法(Method)上的特性</strong></li><li>基本步骤与上面一致。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 获取方法(Method)上的特性</span><br><span class="line">// 用方法接收</span><br><span class="line"> MethodInfo methodInfo = type.GetMethod(&quot;Printf&quot;, new Type[] &#123;&#125;);</span><br><span class="line">if (methodInfo.IsDefined(typeof(IntroduceAttribute), false))</span><br><span class="line">&#123;</span><br><span class="line">    object[] method =  methodInfo.GetCustomAttributes(typeof(IntroduceAttribute),false);</span><br><span class="line">    foreach (IntroduceAttribute introduce in method)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(introduce);</span><br><span class="line">        Console.WriteLine(introduce.Type + &quot;\t&quot; + introduce.Authod + &quot;\t&quot; + introduce.DateTime + &quot;\t&quot; + introduce.Descrip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><p>完成！！！<br>写的太多了，有点累了🤧。<br>掌握的还是不够深入啊🫣。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-反射与特性&quot;&gt;&lt;a href=&quot;#C-反射与特性&quot; class=&quot;headerlink&quot; title=&quot;C# 反射与特性&quot;&gt;&lt;/a&gt;&lt;center&gt;C# 反射与特性&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第一周复盘</title>
    <link href="http://localhost:4000/2024/05/19/The_First_Replay_6/"/>
    <id>http://localhost:4000/2024/05/19/The_First_Replay_6/</id>
    <published>2024-05-19T12:29:22.490Z</published>
    <updated>2024-05-19T13:04:55.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一周复盘5-13-5-19"><a href="#第一周复盘5-13-5-19" class="headerlink" title="第一周复盘5.13~5.19"></a><center>第一周复盘5.13~5.19</center></h1><p><strong>本周</strong></p><ul><li>这周是第一周复盘。</li><li>结束了上位机的初步了解，接下来要开始复盘这次上位机的学习。</li><li>同时，开始学C#的进阶语法，反射，特性，Linq，多线程等，现在反射学习差不多了，准备开始特性的学习。</li><li>这周也开始了英语四级的练习与复习。</li><li>受贵人相助。</li><li>读书时间少了不少。</li><li>睡得挺好，吃的一般。</li><li>多多听书，提高认知。</li><li>做的事多了，少了对环境的几分思考。但是又有几分想玩游戏的心了。<br><a href="https://imgse.com/i/pkKEKUJ"><img src="https://s21.ax1x.com/2024/05/19/pkKEKUJ.png" alt="pkKEKUJ.png"></a><br><strong>心得</strong>：一个人要做的是内心紧迫的，重要的，以之为目的的事。</li></ul><hr><p><strong>下周</strong></p><ul><li>坚持好英语的练习与复习。</li><li>把反射吃透，学习特性与Linq，紧追多线程。</li><li>多花点时间读书。</li><li>坚持锻炼。</li><li>好好思考，多多度量。</li><li>把上位机再过一遍（有点难）。</li><li>年轻人要抓住好机会啊。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一周复盘5-13-5-19&quot;&gt;&lt;a href=&quot;#第一周复盘5-13-5-19&quot; class=&quot;headerlink&quot; title=&quot;第一周复盘5.13~5.19&quot;&gt;&lt;/a&gt;&lt;center&gt;第一周复盘5.13~5.19&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;stro</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C# 应用程序连接SQLServer数据库</title>
    <link href="http://localhost:4000/2024/05/17/CsharpApplicationConnetSQL_5/"/>
    <id>http://localhost:4000/2024/05/17/CsharpApplicationConnetSQL_5/</id>
    <published>2024-05-17T12:05:59.893Z</published>
    <updated>2024-05-17T13:55:02.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-应用程序连接SQLServer数据库"><a href="#C-应用程序连接SQLServer数据库" class="headerlink" title="C# 应用程序连接SQLServer数据库"></a><center>C# 应用程序连接SQLServer数据库</center></h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li>1 思维导图<br><a href="https://imgse.com/i/pkuM2FS"><img src="https://s21.ax1x.com/2024/05/17/pkuM2FS.png" alt="pkuM2FS.png"></a></li><li>2 连接数据库，并打印数据表</li><li>3 数据的增删改</li><li>4 登录系统</li></ul><h2 id="二、连接数据库"><a href="#二、连接数据库" class="headerlink" title="二、连接数据库"></a>二、连接数据库</h2><ul><li>打开 <strong>Visual Studio</strong> 创建 <strong>控制台应用(.Net Framework)</strong></li></ul><p><a href="https://imgse.com/i/pkuMDsI"><img src="https://s21.ax1x.com/2024/05/17/pkuMDsI.png" alt="pkuMDsI.png"></a></p><ul><li><p>引入 <strong>using using System.Data;</strong> 和 <strong>using System.Data.SqlClient;</strong>, 必须的。</p></li><li><p>创建 一个类，类名：<strong>Congif</strong>， 作用：定义一个静态字段和一个静态属性，用来获取和存储连接数据库的sql语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Config</span><br><span class="line">&#123; </span><br><span class="line">    private static string config_con; // 字段</span><br><span class="line">    // 属性</span><br><span class="line">    public static string Config_con &#123; get =&gt; config_con; set =&gt; config_con = value; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个类，类名 <strong>SQL</strong>，并创建一个方法 **GetTable()**， 用来用来获取数据表并返回数据表。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class SQL     </span><br><span class="line">&#123;</span><br><span class="line">    // 返回数据表</span><br><span class="line">    public static DataTable GetTables(string sqltext)</span><br><span class="line">    &#123;</span><br><span class="line">        SqlConnection sqlConnection = new SqlConnection(Config.Config_con);</span><br><span class="line">        SqlDataAdapter adapter = new SqlDataAdapter(sqltext, sqlConnection);</span><br><span class="line">        DataTable dt = new DataTable();</span><br><span class="line">        adapter.Fill(dt);</span><br><span class="line">        adapter.Dispose();</span><br><span class="line">        return dt; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在主函数 <strong>Main(string[] args)</strong> 用<strong>Config.Config_con</strong> 来存储sql连接语句。</li><li>“Data Source &#x3D; <strong>服务器名</strong>; Database &#x3D; <strong>数据库名</strong>; User Id &#x3D; <strong>用户名</strong>; Pwd &#x3D; <strong>密码</strong>; TrustServerCertificate&#x3D;true”;</li><li>数据表格类 <strong>DataTable</strong> 声明实例用来存储数据表。</li><li>dataTable.Rows[i][“EmpID”]：数据表变量.Row[第i行][<strong>列的名称</strong>]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 连接语句</span><br><span class="line">Config.Config_con = &quot;Data Source = (local); Database = text_7; User Id = ttt; Pwd = 123456; TrustServerCertificate=true&quot;;</span><br><span class="line">// 获取表信息</span><br><span class="line">DataTable dataTable = SQL.GetTables(&quot;Select EmpID, Staff_Name, Department from Employee&quot;);</span><br><span class="line"></span><br><span class="line">// 打印每行数据</span><br><span class="line">for (int i = 0; i &lt; dataTable.Rows.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    // [第i行][列的名字]</span><br><span class="line">    Console.WriteLine($&quot;&#123;dataTable.Rows[i][&quot;EmpID&quot;],-10&#125; \t\t &#123;dataTable.Rows[i][&quot;Staff_Name&quot;],-10&#125; \t\t &#123;dataTable.Rows[i][&quot;Department&quot;],-10&#125;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pkuMyeP"><img src="https://s21.ax1x.com/2024/05/17/pkuMyeP.png" alt="pkuMyeP.png"></a></p><center>至此完成数据表的连接和数据表打印</center><hr><h2 id="三、数据的增删改"><a href="#三、数据的增删改" class="headerlink" title="三、数据的增删改"></a>三、数据的增删改</h2><ul><li>在类 <strong>SQL</strong> 中添加 <strong>AlterTable()</strong> 方法</li><li>string sqltext：增删改的sql语句。</li><li>using (语句1){语句2}：执行语句1并在然后进入语句2，执行完语句2后将整个花括号的内容进行释放，以减少程序内存。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 增删改查数据</span><br><span class="line">public static void AlterData(string sqltext)</span><br><span class="line">&#123;</span><br><span class="line">    using (SqlConnection sqlConnection = new SqlConnection(Config.Config_con))</span><br><span class="line">    &#123;</span><br><span class="line">        using (SqlCommand cmd = new SqlCommand(sqltext, sqlConnection))</span><br><span class="line">        &#123;</span><br><span class="line">            sqlConnection.Open();</span><br><span class="line">            cmd.ExecuteNonQuery();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>以下我的代码截图，其中添加了<strong>画沙</strong>(多打了一个部🤣),删除了<strong>庞宇</strong>。<br><a href="https://imgse.com/i/pkuMco8"><img src="https://s21.ax1x.com/2024/05/17/pkuMco8.png" alt="pkuMco8.png"></a><br><a href="https://imgse.com/i/pkuM6df"><img src="https://s21.ax1x.com/2024/05/17/pkuM6df.png" alt="pkuM6df.png"></a></li></ul><center>至此完成数据表的增删改</center><hr><h2 id="四、登录系统"><a href="#四、登录系统" class="headerlink" title="四、登录系统"></a>四、登录系统</h2><ul><li>注意要在数据库里面创建<strong>Loginer</strong>表。</li><li>在最外层用 <strong>While循环</strong>套用。</li><li>定义两个字符串变量<strong>string InputName</strong> 和 <strong>string InputPwd</strong> 分别用来存储输入的 <strong>账号</strong> 和 <strong>密码</strong>。</li><li>string <strong>Inputtext</strong> ：查询输入账号密码的sql语句。</li><li><strong>dataTable_2</strong> &#x3D; SQL.GetTables(Inputtext) ：将输入的账号与密码在数据库中查询，并返回查询结果。</li><li>if (dataTable_2.Rows.Count &lt;&#x3D; 0)：判断查询结果，如果输入错误，则没有查询到内容，否则有数据。然后进行是否继续登录。</li><li>**ShowTable()**：就是将查询语句封装成方法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    DataTable dataTable_2 = null;</span><br><span class="line"></span><br><span class="line">    while (true)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        // 进行登录界面设置</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(&quot;欢迎进入员工登录列表！！！&quot;);</span><br><span class="line">        // 用户名</span><br><span class="line">        Console.Write(&quot;请输入用户名：&quot;);</span><br><span class="line">        string InputName = Console.ReadLine();</span><br><span class="line">        // 密码</span><br><span class="line">        Console.Write(&quot;请输入密码：&quot;);</span><br><span class="line">        string InputPwd = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        // 连接语句</span><br><span class="line">        Config.Config_con = &quot;Data Source = (local); Database = text_7; User Id = ttt; Pwd = 123456; TrustServerCertificate=true&quot;;</span><br><span class="line"></span><br><span class="line">        #region 通过数据库查询</span><br><span class="line"></span><br><span class="line">        string Inputtext = $&quot;select * from Loginer where Loginer_Name = &#x27;&#123;InputName&#125;&#x27; and Loginer_Pwd = &#x27;&#123;InputPwd&#125;&#x27; &quot;;</span><br><span class="line">        dataTable_2 = SQL.GetTables(Inputtext);</span><br><span class="line">        if (dataTable_2.Rows.Count &lt;= 0)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;错误&quot;);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;是否·继续登录？&quot;);</span><br><span class="line">            Console.WriteLine(&quot;Yes \t\t No&quot;);</span><br><span class="line">            string answer = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">            if (answer == &quot;Yes&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">        #endregion</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine($&quot;欢迎登录，尊敬的&#123;dataTable_2.Rows[0][&quot;Loginer_Name&quot;]&#125;&quot;);</span><br><span class="line">    Console.WriteLine(&quot;***********************************************************&quot;);</span><br><span class="line">    ShowTable();</span><br><span class="line">    Console.ReadKey();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    void ShowTable()</span><br><span class="line">    &#123;</span><br><span class="line">        // 连接语句</span><br><span class="line">        Config.Config_con = &quot;Data Source = (local); Database = text_7; User Id = ttt; Pwd = 123456; TrustServerCertificate=true&quot;;</span><br><span class="line">        // 获取表信息</span><br><span class="line">        DataTable dataTable = SQL.GetTables(&quot;Select EmpID, Staff_Name, Department from Employee&quot;);</span><br><span class="line"></span><br><span class="line">        // 打印每行数据</span><br><span class="line">        for (int i = 0; i &lt; dataTable.Rows.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            // [第i行][列的名字]</span><br><span class="line">            Console.WriteLine($&quot;&#123;dataTable.Rows[i][&quot;EmpID&quot;],-10&#125; \t\t &#123;dataTable.Rows[i][&quot;Staff_Name&quot;],-10&#125; \t\t &#123;dataTable.Rows[i][&quot;Department&quot;],-10&#125;&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pkuMrLt"><img src="https://s21.ax1x.com/2024/05/17/pkuMrLt.png" alt="pkuMrLt.png"></a></p><center>大功告成！！！</center><hr><p>慢慢的写文章越来越快了，越来越有条理了，加油！✌</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-应用程序连接SQLServer数据库&quot;&gt;&lt;a href=&quot;#C-应用程序连接SQLServer数据库&quot; class=&quot;headerlink&quot; title=&quot;C# 应用程序连接SQLServer数据库&quot;&gt;&lt;/a&gt;&lt;center&gt;C# 应用程序连接SQLServe</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WPF连接SQL Server</title>
    <link href="http://localhost:4000/2024/05/14/WPF%20connet%20SQL/"/>
    <id>http://localhost:4000/2024/05/14/WPF%20connet%20SQL/</id>
    <published>2024-05-14T09:47:22.787Z</published>
    <updated>2024-05-17T12:04:47.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WPF连接SQL-Server"><a href="#WPF连接SQL-Server" class="headerlink" title="WPF连接SQL Server"></a><center>WPF连接SQL Server</center></h1><h2 id="一-概括内容"><a href="#一-概括内容" class="headerlink" title="一.概括内容:"></a>一.概括内容:</h2><p>2.1 基础设置<br>2.2 设置前置窗口<br>2.3 设置表格窗体<br>2.4 数据添加<br>2.5 表格控件布局设计<br>2.6 与数据库绑定</p><h2 id="二-单表格"><a href="#二-单表格" class="headerlink" title="二.单表格"></a>二.单表格</h2><h3 id="2-1-基础设置"><a href="#2-1-基础设置" class="headerlink" title="2.1 基础设置"></a>2.1 基础设置</h3><ul><li><p>打开VS 创建WPF应用程序,在项目中以下<strong>文件夹</strong><br><a href="https://imgse.com/i/pkmfocQ"><img src="https://s21.ax1x.com/2024/05/14/pkmfocQ.png" alt="pkmfocQ.png"></a></p></li><li><p>在<strong>ViewModel文件夹</strong>中添加<strong>类MainWindowVM.cs</strong></p></li><li><p>在<strong>UserControls文件夹</strong>中添加<strong>用户控件BeforeUC.xaml</strong>.</p></li></ul><h3 id="2-2-设置前置窗口"><a href="#2-2-设置前置窗口" class="headerlink" title="2.2 设置前置窗口"></a>2.2 设置前置窗口</h3><ul><li>在<strong>MainWindowVM.cs</strong>中添加以下代码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">namespace ShowTime.ViewModel</span><br><span class="line">&#123;</span><br><span class="line">    internal class MainWindowVM : INotifyPropertyChanged</span><br><span class="line">    &#123;</span><br><span class="line">        public MainWindowVM()</span><br><span class="line">        &#123;</span><br><span class="line">            InitialTime();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public event PropertyChangedEventHandler? PropertyChanged;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 前置窗口</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        private UserControl _BeforeUC;</span><br><span class="line">        public UserControl BeforeUC</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                if (_BeforeUC == null)</span><br><span class="line">                &#123;</span><br><span class="line">                    _BeforeUC = new BeforeUC();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                return _BeforeUC;</span><br><span class="line">            &#125;</span><br><span class="line">            set &#123; _BeforeUC = value;</span><br><span class="line">                if (PropertyChanged != null)</span><br><span class="line">                &#123;</span><br><span class="line">                    PropertyChanged(this, new PropertyChangedEventArgs(&quot;BeforeUC&quot;));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>解释<code>INotifyPropertyChanged</code>用来通知,鼠标放在上面<code>Ctrl+.</code>自动添加事件<code>PropertyChangedEventHandler</code></li></ul><hr><ul><li>在<strong>MainWindow.xaml.cs</strong> 中添加以下代码.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MainWindowVM mainWindowVM = new MainWindowVM(); //创建子窗体实例</span><br><span class="line">public MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    this.DataContext = mainWindowVM; // 用主窗体覆盖子窗体</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>在<strong>MainWindow.xaml</strong> 中添加以下代码,主窗体的内容绑定BeforeUC窗体.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ContentControl Content=&quot;&#123;Binding BeforeUC&#125;&quot;&gt;&lt;/ContentControl&gt;</span><br></pre></td></tr></table></figure><strong><center>至此完成前置的绑定</center></strong></li></ul><hr><hr><h3 id="2-3-设置表格窗体"><a href="#2-3-设置表格窗体" class="headerlink" title="2.3 设置表格窗体"></a>2.3 设置表格窗体</h3><ul><li>在<strong>UserControl文件夹</strong>中添加<strong>用户控件TableUC.xaml</strong></li><li>在<strong>AllCommand文件夹</strong>中添加<strong>类Command.cs</strong>,并添加以下代码.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Command : ICommand //鼠标放在上面`Ctrl+.`添加以下代码</span><br><span class="line">&#123;</span><br><span class="line">    private Action _execute; </span><br><span class="line"></span><br><span class="line">    public Command(Action action )</span><br><span class="line">    &#123;</span><br><span class="line">        this._execute = action;</span><br><span class="line">    &#125;</span><br><span class="line">    public event EventHandler? CanExecuteChanged;</span><br><span class="line"></span><br><span class="line">    public bool CanExecute(object? parameter)</span><br><span class="line">    &#123;</span><br><span class="line">        return true; // 将原来的改成这样</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Execute(object? parameter)</span><br><span class="line">    &#123;</span><br><span class="line">        if (_execute != null) // 将原来的改成这样</span><br><span class="line">        &#123;</span><br><span class="line">            _execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>在<strong>MainWindow.xaml.cs</strong> 中添加以下代码.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#region 返回窗体</span><br><span class="line"></span><br><span class="line">public void GoBack() //返回前置窗体的方法</span><br><span class="line">&#123;</span><br><span class="line">    BeforeUC beforeUC = new BeforeUC();</span><br><span class="line">    mainWindowVM.BeforeUC = beforeUC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Command GoBackCmm &#123; get &#123; return new Command(GoBack); &#125; &#125; // 命令</span><br><span class="line">#endregion</span><br><span class="line"></span><br><span class="line">#region 人员列表窗体</span><br><span class="line"></span><br><span class="line">public void GoStaffList() //转到人员列表窗体的方法</span><br><span class="line">&#123;</span><br><span class="line">    TableUC tableUC = new TableUC();</span><br><span class="line">    mainWindowVM.BeforeUC = tableUC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Command StaffListCmm &#123; get &#123; return new Command(GoStaffList); &#125; &#125; // 命令</span><br><span class="line"></span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure><hr><ul><li>在<strong>BeforeUC.xaml</strong>中添加两个按钮,每个按钮都有Command命令.<strong>注意命令的书写</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;StackPanel VerticalAlignment=&quot;Center&quot;&gt;</span><br><span class="line">    &lt;Button Content=&quot;单人员列表&quot;</span><br><span class="line">         FontSize=&quot;30&quot;</span><br><span class="line">         Foreground=&quot;Purple&quot;</span><br><span class="line">         Background=&quot;DarkCyan&quot;</span><br><span class="line">         Width=&quot;200&quot;</span><br><span class="line">         Height=&quot;100&quot;</span><br><span class="line">         Margin=&quot;0,10&quot;</span><br><span class="line">         Command=&quot;&#123;Binding StaffListCmm, RelativeSource=&#123;RelativeSource AncestorType=Window&#125;&#125;&quot;&gt;&lt;/Button&gt;</span><br><span class="line">    &lt;Button Content=&quot;双人员列表&quot;</span><br><span class="line">          FontSize=&quot;30&quot;</span><br><span class="line">          Foreground=&quot;Brown&quot;</span><br><span class="line">          Background=&quot;Orange&quot;</span><br><span class="line">          Width=&quot;200&quot;</span><br><span class="line">          Height=&quot;100&quot;</span><br><span class="line">          Margin=&quot;0,10&quot;</span><br><span class="line">          Command=&quot;&#123;Binding StaffListCmm, RelativeSource=&#123;RelativeSource AncestorType=Window&#125;&#125;&quot;&gt;&lt;/Button&gt;</span><br><span class="line">&lt;/StackPanel&gt;</span><br></pre></td></tr></table></figure><strong><center>至此完成了表格窗体的转换</center></strong></li></ul><hr><hr><h3 id="2-4-数据添加"><a href="#2-4-数据添加" class="headerlink" title="2.4 数据添加"></a>2.4 数据添加</h3><ul><li>在<strong>Model文件夹</strong>中添加<strong>类Table_Info.cs</strong>,然后在该类中添加ID,员工姓名,部门三个属性.</li><li><strong>属性的名称与数据库的元组同名</strong>,不然容易报错.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public int EmpID &#123; get; set; &#125; </span><br><span class="line"></span><br><span class="line">public string Staff_Name &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">public string Department &#123; get; set; &#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>在<strong>SQL Server数据库</strong>中,添加以下代码(<strong>地址自行更改</strong>).</li><li>分析:首先创建了text_7数据库,创建了Employee表,添加了10条数据.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">create database text_7</span><br><span class="line">on</span><br><span class="line">(</span><br><span class="line">name = &#x27;text_7&#x27;, filename = &#x27;D:\text_7.mdf&#x27;,</span><br><span class="line">size = 5MB, filegrowth = 2MB</span><br><span class="line">)</span><br><span class="line">log on</span><br><span class="line">(</span><br><span class="line">name = &#x27;text_7_log&#x27;, filename = &#x27;D:\text_7_log.ldf&#x27;,</span><br><span class="line">size = 5MB, filegrowth = 2MB</span><br><span class="line">)</span><br><span class="line">use text_7</span><br><span class="line"></span><br><span class="line">create table Employee</span><br><span class="line">(</span><br><span class="line">EmpID int primary key,</span><br><span class="line">Staff_Name nvarchar(20),</span><br><span class="line">Department nvarchar(20)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">select * from Employee</span><br><span class="line"></span><br><span class="line">INSERT INTO Employee (EmpID, Staff_Name, Department) VALUES (1, &#x27;Alice&#x27;, &#x27;研发部&#x27;);</span><br><span class="line">INSERT INTO Employee (EmpID, Staff_Name, Department) VALUES (2, &#x27;Bob&#x27;, &#x27;销售部&#x27;);</span><br><span class="line">INSERT INTO Employee (EmpID, Staff_Name, Department) VALUES (3, &#x27;Charlie&#x27;, &#x27;财政部&#x27;);</span><br><span class="line">INSERT INTO Employee (EmpID, Staff_Name, Department) VALUES (4, &#x27;David&#x27;, &#x27;人力部&#x27;);</span><br><span class="line">INSERT INTO Employee (EmpID, Staff_Name, Department) VALUES (5, &#x27;Eva&#x27;, &#x27;研发部&#x27;);</span><br><span class="line">INSERT INTO Employee (EmpID, Staff_Name, Department) VALUES (6, &#x27;Frank&#x27;, &#x27;销售部&#x27;);</span><br><span class="line">INSERT INTO Employee (EmpID, Staff_Name, Department) VALUES (7, &#x27;Grace&#x27;, &#x27;财政部&#x27;);</span><br><span class="line">INSERT INTO Employee (EmpID, Staff_Name, Department) VALUES (8, &#x27;Henry&#x27;, &#x27;人力部&#x27;);</span><br><span class="line">INSERT INTO Employee (EmpID, Staff_Name, Department) VALUES (9, &#x27;Ivy&#x27;, &#x27;研发部&#x27;);</span><br><span class="line">INSERT INTO Employee (EmpID, Staff_Name, Department) VALUES (10, &#x27;Jack&#x27;, &#x27;销售部&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pkmfq7q"><img src="https://s21.ax1x.com/2024/05/14/pkmfq7q.png" alt="pkmfq7q.png"></a></p><center>至此成功的创建并添加了数据</center><h3 id="2-5-表格控件布局设计"><a href="#2-5-表格控件布局设计" class="headerlink" title="2.5 表格控件布局设计"></a>2.5 表格控件布局设计</h3><ul><li>添加以下代码到<strong>TableUC</strong>.加图片</li><li>注意分两行两列,<strong>返回按钮</strong>调用<strong>返回命令</strong></li><li>侧部:引用了<strong>RadioButton控件</strong>(圆形按钮控件),并且有<strong>点击事件</strong>(稍后再<strong>TableUC.xaml.cs</strong>添加).</li><li>侧部:引用了<strong>DataGrid控件</strong>(表格控件),注意用法<strong>DataGridTextColumn</strong>设置列名, <strong>AutoGenerateColumns&#x3D;”False</strong>:取消系统自己添加的列.</li><li><strong>注意列的注意数据绑定</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;Grid Background=&quot;White&quot;&gt;</span><br><span class="line">    &lt;Grid.RowDefinitions&gt;</span><br><span class="line">        &lt;RowDefinition Height=&quot;50&quot;/&gt;</span><br><span class="line">        &lt;RowDefinition/&gt;</span><br><span class="line">    &lt;/Grid.RowDefinitions&gt;</span><br><span class="line">    &lt;Grid.ColumnDefinitions&gt;</span><br><span class="line">        &lt;ColumnDefinition Width=&quot;100&quot;/&gt;</span><br><span class="line">        &lt;ColumnDefinition/&gt;</span><br><span class="line">    &lt;/Grid.ColumnDefinitions&gt;</span><br><span class="line">    &lt;!--返回--&gt;</span><br><span class="line">    &lt;Button Content=&quot;返回&quot; FontSize=&quot;20&quot;</span><br><span class="line">            Command=&quot;&#123;Binding GoBackCmm,RelativeSource=&#123;RelativeSource AncestorType=Window&#125;&#125;&quot;&gt;&lt;/Button&gt;</span><br><span class="line">    &lt;!--首部--&gt;</span><br><span class="line">    &lt;TextBlock Grid.Row=&quot;0&quot; Grid.Column=&quot;1&quot; </span><br><span class="line">               Text=&quot;人员列表&quot;</span><br><span class="line">               FontSize=&quot;30&quot;</span><br><span class="line">               Foreground=&quot;Black&quot;</span><br><span class="line">               FontWeight=&quot;Bold&quot;</span><br><span class="line">               VerticalAlignment=&quot;Center&quot; HorizontalAlignment=&quot;Center&quot;</span><br><span class="line">               Margin=&quot;0,0,100,0&quot;&gt;&lt;/TextBlock&gt;</span><br><span class="line">    &lt;!--侧部--&gt;</span><br><span class="line">    &lt;StackPanel Grid.Row=&quot;1&quot; Grid.Column=&quot;0&quot; VerticalAlignment=&quot;Top&quot; HorizontalAlignment=&quot;Center&quot; Margin=&quot;0,10&quot;&gt;</span><br><span class="line">        &lt;RadioButton IsChecked=&quot;True&quot; Content=&quot;总表&quot; FontSize=&quot;20&quot; Foreground=&quot;Black&quot; Margin=&quot;0,5&quot; Click=&quot;Z_Click&quot;&gt;&lt;/RadioButton&gt;</span><br><span class="line">        &lt;RadioButton Content=&quot;研发部&quot; FontSize=&quot;20&quot; Foreground=&quot;Black&quot; Margin=&quot;0,5&quot; Click=&quot;Y_Click&quot;&gt;&lt;/RadioButton&gt;</span><br><span class="line">        &lt;RadioButton Content=&quot;销售部&quot; FontSize=&quot;20&quot; Foreground=&quot;Black&quot; Margin=&quot;0,5&quot; Click=&quot;X_Click&quot;&gt;&lt;/RadioButton&gt;</span><br><span class="line">        &lt;RadioButton Content=&quot;财政部&quot; FontSize=&quot;20&quot; Foreground=&quot;Black&quot; Margin=&quot;0,5&quot; Click=&quot;C_Click&quot;&gt;&lt;/RadioButton&gt;</span><br><span class="line">        &lt;RadioButton Content=&quot;人力部&quot; FontSize=&quot;20&quot; Foreground=&quot;Black&quot; Margin=&quot;0,5&quot; Click=&quot;R_Click&quot;&gt;&lt;/RadioButton&gt;</span><br><span class="line">    &lt;/StackPanel&gt;</span><br><span class="line">    &lt;!--中部--&gt;</span><br><span class="line">    &lt;Grid Grid.Column=&quot;1&quot; Grid.Row=&quot;1&quot;&gt;</span><br><span class="line">        &lt;DataGrid x:Name=&quot;table&quot; FontSize=&quot;15&quot; ItemsSource=&quot;&#123;Binding&#125;&quot; GridLinesVisibility=&quot;All&quot; AutoGenerateColumns=&quot;False&quot;&gt;</span><br><span class="line">            &lt;DataGrid.Columns&gt;</span><br><span class="line">                &lt;DataGridTextColumn Header=&quot;工号&quot; Binding=&quot;&#123;Binding EmpID&#125;&quot; Width=&quot;100&quot;&gt;&lt;/DataGridTextColumn&gt;</span><br><span class="line">                &lt;DataGridTextColumn Header=&quot;姓名&quot; Binding=&quot;&#123;Binding Staff_Name&#125;&quot; Width=&quot;100&quot;&gt;&lt;/DataGridTextColumn&gt;</span><br><span class="line">                &lt;DataGridTextColumn Header=&quot;部门&quot; Binding=&quot;&#123;Binding Department&#125;&quot; Width=&quot;100&quot;&gt;&lt;/DataGridTextColumn&gt;</span><br><span class="line">            &lt;/DataGrid.Columns&gt;</span><br><span class="line">        &lt;/DataGrid&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://imgse.com/i/pkmfOA0"><img src="https://s21.ax1x.com/2024/05/14/pkmfOA0.png" alt="pkmfOA0.png"></a></p><center>至此完成了表格窗口的设计</center><hr><hr><h3 id="2-6-与数据库绑定"><a href="#2-6-与数据库绑定" class="headerlink" title="2.6 与数据库绑定"></a>2.6 与数据库绑定</h3><ul><li><p>在<strong>SQLConnetoins文件</strong>中添加两个类,<strong>Config.cs</strong>和<strong>SQL.cs</strong></p></li><li><p>在<strong>Config</strong>中,定义静态字段,获取数据库语句.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Config</span><br><span class="line">&#123;</span><br><span class="line">    private static string config_con;</span><br><span class="line"></span><br><span class="line">    public static string Config_con &#123; get =&gt; config_con; set =&gt; config_con = value; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<strong>SQL</strong>中,定义静态方法,用来获取数据表</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class SQL</span><br><span class="line">&#123;</span><br><span class="line">    public static DataTable GetTables(string sqltext)</span><br><span class="line">    &#123;</span><br><span class="line">        // 连接</span><br><span class="line">        SqlConnection sqlConnection = new SqlConnection(Config.Config_con);</span><br><span class="line">        SqlDataAdapter adapter = new SqlDataAdapter(sqltext, sqlConnection);</span><br><span class="line">        DataTable dt = new DataTable();</span><br><span class="line">        adapter.Fill(dt);</span><br><span class="line">        adapter.Dispose();</span><br><span class="line">        return dt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pkmfz3F"><img src="https://s21.ax1x.com/2024/05/14/pkmfz3F.png" alt="pkmfz3F.png"></a></p><hr><ul><li>在<strong>TableUC.xaml.cs</strong>添加添加以下代码.</li><li><strong>Config.Config_con</strong>用来存放连接数据库服务器的语句.</li><li>Data Source &#x3D; <strong>服务器名称</strong>; Database &#x3D; <strong>数据库名称</strong>; User Id &#x3D; <strong>用户名</strong>; Pwd &#x3D; <strong>密码</strong>; TrustServerCertificate&#x3D;true(这个用来信任服务器的)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public TableUC() //窗体的主函数</span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    FillTable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void FillTable() //</span><br><span class="line">&#123;</span><br><span class="line">    // 连接语句</span><br><span class="line">    Config.Config_con = &quot;Data Source = (local); Database = text_7; User Id = ttt; Pwd = 123456; TrustServerCertificate=true&quot;;</span><br><span class="line">    // 获取表信息</span><br><span class="line">    DataTable dataTable = SQL.GetTables(&quot;Select EmpID, Staff_Name, Department from Employee&quot;);</span><br><span class="line">    // 展现</span><br><span class="line">    this.table.ItemsSource = dataTable.DefaultView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在<strong>TableUC.xaml.cs</strong>添加添加以下代码.以下是按钮的事件.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 研发部</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;</span><br><span class="line">private void Y_Click(object sender, RoutedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    DataTable dataTable = SQL.GetTables(&quot;Select EmpID, Staff_Name, Department from Employee where Department = &#x27;研发部&#x27;&quot;);</span><br><span class="line">    this.table.ItemsSource = dataTable.DefaultView;</span><br><span class="line">&#125;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 销售部</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;</span><br><span class="line">private void X_Click(object sender, RoutedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    DataTable dataTable = SQL.GetTables(&quot;Select EmpID, Staff_Name, Department from Employee where Department = &#x27;销售部&#x27;&quot;);</span><br><span class="line">    this.table.ItemsSource = dataTable.DefaultView;</span><br><span class="line">&#125;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 财政部</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;</span><br><span class="line">private void C_Click(object sender, RoutedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    DataTable dataTable = SQL.GetTables(&quot;Select EmpID, Staff_Name, Department from Employee where Department = &#x27;财政部&#x27;&quot;);</span><br><span class="line">    this.table.ItemsSource = dataTable.DefaultView;</span><br><span class="line">&#125;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 人力部</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;</span><br><span class="line">private void R_Click(object sender, RoutedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    DataTable dataTable = SQL.GetTables(&quot;Select EmpID, Staff_Name, Department from Employee where Department = &#x27;人力部&#x27;&quot;);</span><br><span class="line">    this.table.ItemsSource = dataTable.DefaultView;</span><br><span class="line">&#125;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 总表</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;</span><br><span class="line">private void Z_Click(object sender, RoutedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    DataTable dataTable = SQL.GetTables(&quot;Select EmpID, Staff_Name, Department from Employee&quot;);</span><br><span class="line">    this.table.ItemsSource = dataTable.DefaultView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><center>大功告成</center></strong></p><hr><p>如有错误或问题欢迎指正和提问,微信联系.</p><p>谢谢你的陪伴与鼓励🦌.</p><p>下期再见!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WPF连接SQL-Server&quot;&gt;&lt;a href=&quot;#WPF连接SQL-Server&quot; class=&quot;headerlink&quot; title=&quot;WPF连接SQL Server&quot;&gt;&lt;/a&gt;&lt;center&gt;WPF连接SQL Server&lt;/center&gt;&lt;/h1&gt;&lt;h2 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WPF实时动态显示时间</title>
    <link href="http://localhost:4000/2024/05/06/WPF%E5%AE%9E%E6%97%B6%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BA%E6%97%B6%E9%97%B4_3/"/>
    <id>http://localhost:4000/2024/05/06/WPF%E5%AE%9E%E6%97%B6%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BA%E6%97%B6%E9%97%B4_3/</id>
    <published>2024-05-06T05:41:20.197Z</published>
    <updated>2024-05-07T09:27:49.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WPF实时动态显示时间"><a href="#WPF实时动态显示时间" class="headerlink" title="WPF实时动态显示时间"></a><center>WPF实时动态显示时间</center></h1><h3 id="一、基本设置"><a href="#一、基本设置" class="headerlink" title="一、基本设置"></a>一、基本设置</h3><p> &emsp; &emsp;打开VS，创建<strong>WPF应用程序</strong>，在左侧<strong>解决方案</strong>中增加文价夹<code>ViewModel</code>，并且在里面新增类<code>MainWindowVM.cs</code></p><p><a href="https://imgse.com/i/pkEJR1A"><img src="https://s21.ax1x.com/2024/05/06/pkEJR1A.png" alt="pkEJR1A.png"></a></p><h3 id="二、MainWindowVM代码"><a href="#二、MainWindowVM代码" class="headerlink" title="二、MainWindowVM代码"></a>二、MainWindowVM代码</h3><h4 id="继承通知类"><a href="#继承通知类" class="headerlink" title="继承通知类"></a>继承通知类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">internal class MainWindowVM : INotifyPropertyChanged</span><br><span class="line">&#123;</span><br><span class="line">public event PropertyChangedEventHandler? PropertyChanged;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继承<code>INotifyPropertyChanged</code>通知类，然后鼠标放在上面，<code>Ctrl+.</code>自动生成事件。（强大的VS🥳）</li></ul><h4 id="创建属性"><a href="#创建属性" class="headerlink" title="创建属性"></a>创建属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private string _DateNow;</span><br><span class="line">public string DateNow</span><br><span class="line">&#123;</span><br><span class="line">get &#123; return _DateNow; &#125;</span><br><span class="line">set &#123; _DateNow = value;</span><br><span class="line">if (PropertyChanged != null)</span><br><span class="line">&#123;</span><br><span class="line">PropertyChanged(this, new PropertyChangedEventArgs(&quot;DateNow&quot;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private string _TimeNow;</span><br><span class="line"></span><br><span class="line">public string TimeNow</span><br><span class="line">&#123;</span><br><span class="line">get &#123; return _TimeNow; &#125;</span><br><span class="line">set &#123; _TimeNow = value; </span><br><span class="line">if(PropertyChanged != null)</span><br><span class="line">&#123;</span><br><span class="line">PropertyChanged(this, new PropertyChangedEventArgs(&quot;TimeNow&quot;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>就简简单单两个属性，不难。</li><li>完整事件快捷键：<code>propfull + Tab</code></li><li>DateNow属性：获取日期</li><li>TimeNow属性：获取时间</li><li><code>if(PropertyChanged != null)</code>：如果通知事件不为null，就通知DateNow和TimeNow</li></ul><h4 id="创建事件"><a href="#创建事件" class="headerlink" title="创建事件"></a>创建事件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private void InitializeTimer()</span><br><span class="line">&#123;</span><br><span class="line">// 实例对象</span><br><span class="line">DispatcherTimer _timer = new DispatcherTimer(); </span><br><span class="line">// 刷新时间</span><br><span class="line">_timer.Interval = System.TimeSpan.FromSeconds(1);</span><br><span class="line">// 增加事件</span><br><span class="line">_timer.Tick += time_Tick;</span><br><span class="line">// 执行</span><br><span class="line">_timer.Start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">              private void time_Tick(object? sender, EventArgs e)</span><br><span class="line">              &#123;</span><br><span class="line">                  // 获取日期</span><br><span class="line">                  DateNow = DateTime.Now.ToString(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">                  // 获取时间</span><br><span class="line">                  TimeNow = DateTime.Now.ToString(&quot;HH:mm:ss&quot;);</span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure><p><strong><center>InitializeTimer()方法</center></strong></p><ul><li><code>DispatcherTimer</code>：集成到按指定时间间隔和指定优先级处理的 Dispatcher 队列中的计时器（<strong>官方解释</strong>）。创建一个定时器类实例。</li><li><code>_timer.Interval</code>：获取或设置引发 Elapsed 事件的间隔（以毫秒为单位）（<strong>官方解释</strong>）</li><li><code>System.TimeSpan.FromSeconds(1)</code>：返回表示指定秒数的 TimeSpan，其中对秒数的指定精确到最接近的毫秒（<strong>官方解释</strong>）。事件刷新时间为1秒</li><li><code>_timer.Tick += time_Tick;</code>：触发事件</li><li><code>_timer.Start();</code>：开始执行。</li></ul><p><strong><center>time_Tick()方法</center></strong></p><ul><li>在<code>InitializeTimer()</code>方法中，写好<code>_timer.Tick += time_Tick;</code>后鼠标放在上面，<code>Ctrl+.</code>快速生成<code>time_Tick()</code>方法。</li><li><code>DateNow = DateTime.Now.ToString(&quot;yyyy-MM-dd&quot;);</code>：获取当前的日期并进行字符串转换格式年月日。</li><li><code>TimeNow = DateTime.Now.ToString(&quot;HH:mm:ss&quot;);</code>：获取当前的时间并进行字符串转换。</li></ul><h3 id="三、MainWindow-xaml代码"><a href="#三、MainWindow-xaml代码" class="headerlink" title="三、MainWindow.xaml代码"></a>三、MainWindow.xaml代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;Border CornerRadius=&quot;20&quot;&gt;</span><br><span class="line">    &lt;Border.Background&gt;</span><br><span class="line">        &lt;LinearGradientBrush&gt;</span><br><span class="line">            &lt;GradientStop Color=&quot;DarkOliveGreen&quot; Offset=&quot;0&quot;&gt;&lt;/GradientStop&gt;</span><br><span class="line">            &lt;GradientStop Color=&quot;Goldenrod&quot; Offset=&quot;1&quot;&gt;&lt;/GradientStop&gt;</span><br><span class="line">        &lt;/LinearGradientBrush&gt;</span><br><span class="line">    &lt;/Border.Background&gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;UniformGrid Columns=&quot;1&quot; VerticalAlignment=&quot;Center&quot; HorizontalAlignment=&quot;Center&quot;&gt;</span><br><span class="line">            &lt;TextBlock Text=&quot;&#123;Binding TimeNow&#125;&quot;</span><br><span class="line">                       Width=&quot;400&quot; Height=&quot;100&quot;</span><br><span class="line">                       FontSize=&quot;30&quot; FontWeight=&quot;Bold&quot;</span><br><span class="line">                       Foreground=&quot;DarkSlateBlue&quot;</span><br><span class="line">                       HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot;&gt;&lt;/TextBlock&gt;</span><br><span class="line">            &lt;TextBlock Text=&quot;&#123;Binding DateNow&#125;&quot;</span><br><span class="line">                       Width=&quot;400&quot; Height=&quot;100&quot;</span><br><span class="line">                       FontSize=&quot;30&quot; FontWeight=&quot;Bold&quot;</span><br><span class="line">                       Foreground=&quot;DarkSlateBlue&quot;</span><br><span class="line">                       HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot;&gt;&lt;/TextBlock&gt;</span><br><span class="line">        &lt;/UniformGrid&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/Border&gt;</span><br></pre></td></tr></table></figure><ul><li>不要看到这么多代码不要担心，<strong>其实都很简单</strong>，慢慢看，加油！！！</li><li><code>&lt;Border&gt;</code>：设置背景颜色。（不必劳心😐）<code>&lt;LinearGradientBrush&gt;</code>使用，见往期文章<br><a href="https://eaglebin.github.io/2024/05/05/WPF%E6%B8%90%E5%8F%98%E8%89%B2%E8%83%8C%E6%99%AF%E5%8F%8A%E8%BE%B9%E6%A1%86%E8%AE%BE%E7%BD%AE/">https://eaglebin.github.io/2024/05/05/WPF%E6%B8%90%E5%8F%98%E8%89%B2%E8%83%8C%E6%99%AF%E5%8F%8A%E8%BE%B9%E6%A1%86%E8%AE%BE%E7%BD%AE/</a></li><li><code>&lt;UniformGrid Columns=&quot;1&quot;&gt;</code>：自动分行分列，系统根据控件数量来依据。<code>Columns=&quot;1&quot;</code>固定为1列。</li><li><code>&lt;TextBlock&gt;</code>：小型文本控件；<code>Text=&quot;&#123;Binding TimeNow&#125;&quot;</code>设置文本内容，动态绑定<strong>TimeNow</strong>；其他的内容就是简单的文字设置与布局。</li></ul><h3 id="四、MainWindow-xaml-cs代码"><a href="#四、MainWindow-xaml-cs代码" class="headerlink" title="四、MainWindow.xaml.cs代码"></a>四、MainWindow.xaml.cs代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    MainWindowVM mainWindowVM = new MainWindowVM();</span><br><span class="line">    this.DataContext = mainWindowVM;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实例<code>MainWindowVM</code>类。</li><li><code>this.DataContext = mainWindowVM;</code>：主窗口数据绑定mainWindowVM。</li></ul><h3 id="五、调用InitializeTimer-函数"><a href="#五、调用InitializeTimer-函数" class="headerlink" title="五、调用InitializeTimer()函数"></a>五、调用InitializeTimer()函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 构造器,软件运行时执行</span><br><span class="line">public MainWindowVM()</span><br><span class="line">&#123;</span><br><span class="line">    InitializeTimer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>ctor+Tab</code>快速生成构造器，调用InitializeTimer()。</li></ul><h3 id="六、效果图"><a href="#六、效果图" class="headerlink" title="六、效果图"></a>六、效果图</h3><p><a href="https://imgse.com/i/pkEJW6I"><img src="https://s21.ax1x.com/2024/05/06/pkEJW6I.png" alt="pkEJW6I.png"></a></p><p>5月6日学习成果，每天进步一点点，加油！！！<br>写的不怎么样，青涩难懂！哎😩。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WPF实时动态显示时间&quot;&gt;&lt;a href=&quot;#WPF实时动态显示时间&quot; class=&quot;headerlink&quot; title=&quot;WPF实时动态显示时间&quot;&gt;&lt;/a&gt;&lt;center&gt;WPF实时动态显示时间&lt;/center&gt;&lt;/h1&gt;&lt;h3 id=&quot;一、基本设置&quot;&gt;&lt;a h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WPF渐变色背景及边框设置</title>
    <link href="http://localhost:4000/2024/05/05/WPF%E6%B8%90%E5%8F%98%E8%89%B2%E8%83%8C%E6%99%AF%E5%8F%8A%E8%BE%B9%E6%A1%86%E8%AE%BE%E7%BD%AE_2/"/>
    <id>http://localhost:4000/2024/05/05/WPF%E6%B8%90%E5%8F%98%E8%89%B2%E8%83%8C%E6%99%AF%E5%8F%8A%E8%BE%B9%E6%A1%86%E8%AE%BE%E7%BD%AE_2/</id>
    <published>2024-05-05T13:50:39.437Z</published>
    <updated>2024-05-05T14:51:38.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WPF渐变色背景及条纹线条设置"><a href="#WPF渐变色背景及条纹线条设置" class="headerlink" title="WPF渐变色背景及条纹线条设置"></a><center>WPF渐变色背景及条纹线条设置</center></h2><h3 id="一、由圆心向四周扩散"><a href="#一、由圆心向四周扩散" class="headerlink" title="一、由圆心向四周扩散"></a>一、由圆心向四周扩散</h3><center>先看代码</center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;Grid&gt;</span><br><span class="line">    &lt;!--渐变背景颜色--&gt;</span><br><span class="line">    &lt;Grid.Background&gt;</span><br><span class="line">        &lt;!--使用画刷--&gt;</span><br><span class="line">        &lt;RadialGradientBrush&gt;</span><br><span class="line">            &lt;!--设置颜色--&gt;</span><br><span class="line">            &lt;GradientStop Color=&quot;#285173&quot;  Offset=&quot;0&quot;/&gt;</span><br><span class="line">            &lt;GradientStop Color=&quot;#244967&quot;  Offset=&quot;0.7&quot;/&gt;</span><br><span class="line">            &lt;GradientStop Color=&quot;#14273a&quot; Offset=&quot;1&quot;/&gt;</span><br><span class="line">        &lt;/RadialGradientBrush&gt;</span><br><span class="line">    &lt;Grid.Background&gt;</span><br><span class="line">&lt;Grid&gt;</span><br></pre></td></tr></table></figure><center>效果图</center><p><a href="https://imgse.com/i/pkAz2bF"><img src="https://s21.ax1x.com/2024/05/05/pkAz2bF.png" alt="pkAz2bF.png"></a></p><ul><li><code>&lt;Grid Background&gt;</code>设置背景</li><li><code>&lt;RadialGradientBrush&gt; </code>使用画刷</li><li><code>&lt;GradientStop&gt;</code> 设置颜色，Color设置颜色，Offset设置从圆心到某个值比例的范围，例如上面代码第一个颜色范围从0到0.7，第二个颜色从0.7到1，其余外围是第三颜色。</li></ul><h3 id="二、从左上角到右下角"><a href="#二、从左上角到右下角" class="headerlink" title="二、从左上角到右下角"></a>二、从左上角到右下角</h3><center>先看代码</center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    &lt;LinearGradientBrush&gt;</span><br><span class="line">        &lt;GradientStop Color=&quot;DarkOliveGreen&quot; Offset=&quot;0&quot;&gt;&lt;/GradientStop&gt;</span><br><span class="line">        &lt;GradientStop Color=&quot;Goldenrod&quot;  Offset=&quot;1&quot;&gt;&lt;/GradientStop&gt;</span><br><span class="line">    &lt;/LinearGradientBrush&gt;</span><br><span class="line">&lt;/Border.Background&gt; </span><br></pre></td></tr></table></figure><center>效果图（有一种高级配色的感觉）</center><p><a href="https://imgse.com/i/pkESAaQ"><img src="https://s21.ax1x.com/2024/05/05/pkESAaQ.png" alt="pkESAaQ.png"></a></p><ul><li><code>&lt;Grid Background&gt;</code>设置背景</li><li><code>&lt;RadialGradientBrush&gt; </code>使用画刷</li><li><code>&lt;LinearGradientBrush&gt;</code> 设置颜色，Color设置颜色，Offset设置从左上角到某个值比例的范围，例如上面代码第一个颜色范围从0到0.5，其余外围是第二颜色。</li></ul><hr><h2 id="线条条纹设计"><a href="#线条条纹设计" class="headerlink" title="线条条纹设计"></a><center>线条条纹设计</center></h2><h3 id="Y轴"><a href="#Y轴" class="headerlink" title="Y轴"></a>Y轴</h3><center>先看代码</center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Border Width=&quot;100&quot; Height=&quot;100&quot; Grid.Row=&quot;1&quot; BorderThickness=&quot;1,1,1,1&quot;   BorderBrush=&quot;AliceBlue&quot;&gt;</span><br><span class="line">    &lt;Border.Background&gt;</span><br><span class="line">        &lt;VisualBrush TileMode=&quot;FlipY&quot; Viewport=&quot;0,0,7,7&quot; ViewportUnits=&quot;Absolute&quot;&gt;</span><br><span class="line">            &lt;VisualBrush.Visual&gt;</span><br><span class="line">                &lt;Line X1=&quot;0&quot; Y1=&quot;10&quot; X2=&quot;10&quot; Y2=&quot;0&quot; Stroke=&quot;red&quot; StrokeThickness=&quot;1&quot;&gt;&lt;/Line&gt;</span><br><span class="line">            &lt;/VisualBrush.Visual&gt;</span><br><span class="line">        &lt;/VisualBrush&gt;</span><br><span class="line">    &lt;/Border.Background&gt;</span><br><span class="line">&lt;/Border&gt;</span><br></pre></td></tr></table></figure><center>效果图（背景是上图绿黄配色）</center><p><a href="https://imgse.com/i/pkES7Js"><img src="https://s21.ax1x.com/2024/05/05/pkES7Js.png" alt="pkES7Js.png"></a></p><ul><li><code>&lt;Boder&gt;</code>设置边框</li><li><code>&lt;Boder.Background&gt;</code>对背景进行编辑</li><li><code>&lt;VisualBrush&gt;</code>笔刷，<code>TileMode=&quot;FlipY&quot;</code>设置平铺方式为Y轴，从上到下,<code>Viewport=&quot;0,0,7,7&quot;</code>设置平铺范围，为绝对平铺；相对平铺为<code>Viewport=&quot;0,0,0.5,0.5&quot;</code>,占总像素范围的一半。<code>ViewportUnits=&quot;Absolute&quot;</code> 直接翻译为“视图单位”，“完全的，绝对的”</li><li><code>&lt;Line X1=&quot;0&quot; Y1=&quot;10&quot; X2=&quot;10&quot; Y2=&quot;0&quot; Stroke=&quot;red&quot; StrokeThickness=&quot;1&quot;&gt;&lt;/Line&gt;</code> 线条设计 起点坐标（0,10）,终点坐标（10,0）（我也不太懂🤕），<code>Stroke=&quot;red&quot;</code>颜色设计，<code>StrokeThickness=&quot;1&quot;</code>线条粗细。</li></ul><h3 id="X轴"><a href="#X轴" class="headerlink" title="X轴"></a>X轴</h3><center>先看代码</center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--边框设计--&gt;</span><br><span class="line">    &lt;Border Width=&quot;100&quot; Height=&quot;100&quot; Grid.Row=&quot;1&quot; BorderThickness=&quot;1,1,1,1&quot; BorderBrush=&quot;AliceBlue&quot;&gt;</span><br><span class="line">        &lt;!--背景设计--&gt;</span><br><span class="line">        &lt;Border.Background&gt;</span><br><span class="line">            &lt;!--笔刷设计--&gt;</span><br><span class="line">            &lt;VisualBrush TileMode=&quot;FlipX&quot; Viewport=&quot;0,0,7,7&quot; ViewportUnits=&quot;Absolute&quot;&gt;</span><br><span class="line">                &lt;VisualBrush.Visual&gt;</span><br><span class="line">                    &lt;Line X1=&quot;0&quot; Y1=&quot;10&quot; X2=&quot;10&quot; Y2=&quot;0&quot; Stroke=&quot;red&quot; StrokeThickness=&quot;1&quot;&gt;&lt;/Line&gt;</span><br><span class="line">                &lt;/VisualBrush.Visual&gt;</span><br><span class="line">            &lt;/VisualBrush&gt;</span><br><span class="line">        &lt;/Border.Background&gt;</span><br><span class="line">    &lt;/Border&gt;</span><br></pre></td></tr></table></figure><center>效果图（背景是上图绿黄配色）</center><p><a href="https://imgse.com/i/pkEpNkQ"><img src="https://s21.ax1x.com/2024/05/05/pkEpNkQ.png" alt="pkEpNkQ.png"></a></p><ul><li><code>&lt;Boder&gt;</code>设置边框</li><li><code>&lt;Boder.Background&gt;</code>对背景进行编辑</li><li><code>&lt;VisualBrush&gt;</code>笔刷，<code>TileMode=&quot;FlipX&quot;</code>设置平铺方式为X轴，从左到右,<code>Viewport=&quot;0,0,7,7&quot;</code>设置平铺范围，为绝对平铺；相对平铺为<code>Viewport=&quot;0,0,0.5,0.5&quot;</code>,占总像素范围的一半。<code>ViewportUnits=&quot;Absolute&quot;</code> 直接翻译为“视图单位”，“完全的，绝对的”</li><li><code>&lt;Line X1=&quot;0&quot; Y1=&quot;10&quot; X2=&quot;10&quot; Y2=&quot;0&quot; Stroke=&quot;red&quot; StrokeThickness=&quot;1&quot;&gt;&lt;/Line&gt;</code> 线条设计 起点坐标（0,10）,终点坐标（10,0）（我也不太懂🤕），<code>Stroke=&quot;red&quot;</code>颜色设计，<code>StrokeThickness=&quot;1&quot;</code>线条粗细。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;WPF渐变色背景及条纹线条设置&quot;&gt;&lt;a href=&quot;#WPF渐变色背景及条纹线条设置&quot; class=&quot;headerlink&quot; title=&quot;WPF渐变色背景及条纹线条设置&quot;&gt;&lt;/a&gt;&lt;center&gt;WPF渐变色背景及条纹线条设置&lt;/center&gt;&lt;/h2&gt;&lt;h3 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown Study</title>
    <link href="http://localhost:4000/2024/05/03/Markdown_Study_1/"/>
    <id>http://localhost:4000/2024/05/03/Markdown_Study_1/</id>
    <published>2024-05-03T14:31:07.210Z</published>
    <updated>2024-05-03T14:30:20.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-Study"><a href="#Markdown-Study" class="headerlink" title=" Markdown Study"></a><center> Markdown Study</center></h1><p><strong><center><font face="楷体" size=4>莫待花黄苦林哀</font></center></strong></p><h2 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a><strong>1.标题</strong></h3><p>#+空格+文本， <code># 一级标题</code><br>几个#几级标题</p><hr><h3 id="2-加粗"><a href="#2-加粗" class="headerlink" title="2.加粗"></a><strong>2.加粗</strong></h3><p>两个**+文本+<strong>，<code>**文本**</code><br>例如：</strong>Use VS code to write Markdown is a good idea**</p><hr><h3 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a><strong>3.引用</strong></h3><ol><li>英文小箭头&gt;+空格+文本（”<strong>&gt;</strong>“前面任何字符），<code>&gt;数据结构</code></li><li>几个&gt;几级<blockquote><p>刘铁猛C#入门学习</p><blockquote><p>类型定义，语句介绍，选择、循环</p></blockquote></blockquote></li></ol><blockquote><p>刘铁猛C#进阶学习</p><blockquote><p>类的基本认识</p></blockquote></blockquote><hr><h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4.无序列表"></a><strong>4.无序列表</strong></h3><ol><li>用-，+，*都可以(符号前面都无文字)</li></ol><ul><li>强调无序</li></ul><ul><li>加号也可以</li></ul><ul><li>*号也可以</li><li></li></ul><hr><h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5.有序列表"></a><strong>5.有序列表</strong></h3><ol><li>列表1</li><li>列表2</li><li>数字+.+空格，<code>1.列表1</code></li></ol><hr><h3 id="6-TodoList"><a href="#6-TodoList" class="headerlink" title="6.TodoList"></a><strong>6.TodoList</strong></h3><ol><li>介绍：选择框 </li><li>样式：<br>打勾：- [x] 文本，<code>-[x] 文本</code><br>空：- [ ] 文本，<code>-[] 文本</code></li></ol><ul><li><input checked="" disabled="" type="checkbox"> 数据结构</li><li><input disabled="" type="checkbox"> 数据库</li><li><input disabled="" type="checkbox"> </li></ul><hr><h3 id="7-表格"><a href="#7-表格" class="headerlink" title="7.表格"></a><strong>7.表格</strong></h3><p>&#96;| 左对齐 | 居中对齐 | 右对齐|</p><p>| :—– | :—–: | —-: |<br>| 冒号在左 | 两边都有 | 冒号在右|&#96;</p><table><thead><tr><th align="left">左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">冒号在左</td><td align="center">两边都有</td><td align="right">冒号在右</td></tr></tbody></table><hr><h3 id="8-换行"><a href="#8-换行" class="headerlink" title="8.换行"></a><strong>8.换行</strong></h3><ul><li><p>两个以上的空格+回车</p><p>黄行<br>黄花</p></li><li><p>分割线：三个*，<code>***</code></p></li><li></li></ul><hr><h3 id="9-字体"><a href="#9-字体" class="headerlink" title="9.字体"></a><strong>9.字体</strong></h3><table><thead><tr><th align="center">字体</th><th align="center">代码</th></tr></thead><tbody><tr><td align="center"><em>斜体</em></td><td align="center">* *</td></tr><tr><td align="center">&#x3D;&#x3D;高亮&#x3D;&#x3D;</td><td align="center">&#x3D;&#x3D; &#x3D;&#x3D;</td></tr><tr><td align="center"><strong>粗体</strong></td><td align="center">** **</td></tr><tr><td align="center"><em><strong>粗斜体</strong></em></td><td align="center">*** ***</td></tr><tr><td align="center"><del>删除</del></td><td align="center">~~ ~~</td></tr><tr><td align="center"><u> 下划线 </u></td><td align="center"><code>&lt;u&gt; &lt;/u&gt;</code></td></tr></tbody></table><ul><li>脚注<br>谢谢大家观看本篇文章[^1]!!<br>[^1]: 谢谢大家?!</li></ul><hr><h3 id="10-代码"><a href="#10-代码" class="headerlink" title="10.代码"></a><strong>10.代码</strong></h3><ul><li>代码前后加三个 <strong>&#96;</strong><br>例如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public string WeekStr</span><br><span class="line">&#123;</span><br><span class="line">    get</span><br><span class="line">    &#123;</span><br><span class="line">        int index = (int)DateTime.Now.DayOfWeek;</span><br><span class="line">        string[] week = new string[7] </span><br><span class="line">        &#123; &quot;星期天&quot;, &quot;星期一&quot;, &quot;星期天二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot; &#125;;</span><br><span class="line">        return week[index];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也可以直接在代码前后加 <strong>&#96;</strong></li></ul><p><code>public event PropertyChangedEventHandler? PropertyChanged;</code></p><hr><h3 id="11-超链接"><a href="#11-超链接" class="headerlink" title="11.超链接"></a><strong>11.超链接</strong></h3><p>[必应] : <a href="https://cn.bing.com/?mkt=zh-CN&mkt=zh-CN">https://cn.bing.com/?mkt=zh-CN&amp;mkt=zh-CN</a></p><ul><li>c#文档 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/">https://learn.microsoft.com/zh-cn/dotnet/csharp/</a></li></ul><hr><h3 id="12-图片"><a href="#12-图片" class="headerlink" title="12.图片"></a><strong>12.图片</strong></h3><ol><li><p>运用图床生成markdown代码<br>  [免费图床] :<a href="https://imgse.com/">https://imgse.com/</a></p></li><li><p>运用<code>![图片文本](链接 &quot;Magic Gardens&quot;)</code><br><img src="https://markdown.com.cn/assets/img/philly-magic-garden.9c0b4415.jpg" alt="图片" title="图片标题文本"></p></li></ol><h3 id="13-其他"><a href="#13-其他" class="headerlink" title="13.其他"></a>13.其他</h3><ul><li><strong>居中</strong> <code>&lt;center&gt;文本&lt;/center&gt; </code></li><li><strong>字体</strong> <code>&lt;font face=&quot;楷体&quot; size = 4 color=&quot;Yellow&quot;&gt;文本&lt;/font&gt; </code></li><li><code>#与**放在&lt;center&gt;&lt;/center&gt;这些外面 </code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown-Study&quot;&gt;&lt;a href=&quot;#Markdown-Study&quot; class=&quot;headerlink&quot; title=&quot; Markdown Study&quot;&gt;&lt;/a&gt;&lt;center&gt; Markdown Study&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;st</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://localhost:4000/2024/05/01/hello-world/"/>
    <id>http://localhost:4000/2024/05/01/hello-world/</id>
    <published>2024-05-01T13:04:43.463Z</published>
    <updated>2024-05-01T13:04:43.463Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
